// Generated by gencpp from file vgn/PredictGraspsResponse.msg
// DO NOT EDIT!


#ifndef VGN_MESSAGE_PREDICTGRASPSRESPONSE_H
#define VGN_MESSAGE_PREDICTGRASPSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vgn/GraspConfig.h>

namespace vgn
{
template <class ContainerAllocator>
struct PredictGraspsResponse_
{
  typedef PredictGraspsResponse_<ContainerAllocator> Type;

  PredictGraspsResponse_()
    : grasps()  {
    }
  PredictGraspsResponse_(const ContainerAllocator& _alloc)
    : grasps(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::vgn::GraspConfig_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::vgn::GraspConfig_<ContainerAllocator> >> _grasps_type;
  _grasps_type grasps;





  typedef boost::shared_ptr< ::vgn::PredictGraspsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vgn::PredictGraspsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PredictGraspsResponse_

typedef ::vgn::PredictGraspsResponse_<std::allocator<void> > PredictGraspsResponse;

typedef boost::shared_ptr< ::vgn::PredictGraspsResponse > PredictGraspsResponsePtr;
typedef boost::shared_ptr< ::vgn::PredictGraspsResponse const> PredictGraspsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vgn::PredictGraspsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vgn::PredictGraspsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vgn::PredictGraspsResponse_<ContainerAllocator1> & lhs, const ::vgn::PredictGraspsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.grasps == rhs.grasps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vgn::PredictGraspsResponse_<ContainerAllocator1> & lhs, const ::vgn::PredictGraspsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vgn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vgn::PredictGraspsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vgn::PredictGraspsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vgn::PredictGraspsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b55c9ab96e86d642dca84f4b80ed95b7";
  }

  static const char* value(const ::vgn::PredictGraspsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb55c9ab96e86d642ULL;
  static const uint64_t static_value2 = 0xdca84f4b80ed95b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vgn/PredictGraspsResponse";
  }

  static const char* value(const ::vgn::PredictGraspsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vgn/GraspConfig[] grasps\n"
"\n"
"\n"
"================================================================================\n"
"MSG: vgn/GraspConfig\n"
"geometry_msgs/Pose pose\n"
"float32 width\n"
"float32 quality\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::vgn::PredictGraspsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictGraspsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vgn::PredictGraspsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vgn::PredictGraspsResponse_<ContainerAllocator>& v)
  {
    s << indent << "grasps[]" << std::endl;
    for (size_t i = 0; i < v.grasps.size(); ++i)
    {
      s << indent << "  grasps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vgn::GraspConfig_<ContainerAllocator> >::stream(s, indent + "    ", v.grasps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VGN_MESSAGE_PREDICTGRASPSRESPONSE_H
